Cre

ate an online store shopping system using Flask/Streamlit (Flask recommended) and SQLAlchemy that includes:

    Login (if there are 3 or more incorrect login attempts, the login should be blocked)
    Registration
    Ability to view your current balance
    Ability to top up your balance
    View products available in the system
    View products by various sorting/filtering methods, by price, by rating, etc.
    Add products from the system to the cart and save it
    Purchase products in the cart
    After purchasing a product, you can leave a review of the product and a rating of 1-5 stars
    Logout
    Administrator privileges
        Add a new product
        Replenish the quantity of existing products
        Remove a product from sale
        View a list of system users
        Delete system users
        View product statistics. How many products were sold on which day, for how much were sold, which months were the most profitable, which products were rated the best.

Additional requirements:

    Use Try, except everywhere (all errors must be caught and logical error messages displayed).
    Data must persist between program runs, use a database for this, you can use any database.
    The system must have a clear and organized structure (static, templates, CRUD operations (controllers/services) (separate CRUD files for individual models). Don't forget to put these files in folders.
    There must be checks everywhere (e.g., the user cannot purchase a product that does not exist), or cannot purchase if they do not have enough funds.
    You must use Github with at least the following branches (Master, Development, and task branches (e.g., AddingLoginFunctionality branch). There must be at least 10 commits per team. There cannot be direct commits to the Master branch (protection is paid, so pretend it is). Create at least a few pull requests.
    You must use migrations.
    You must use a tool for task management Jira/trello/other tools.
    Be sure to make a logger (all errors must be logged). Actions should also be logged (CRUD operations, e.g., so-and-so bought such a product successfully, so-and-so created a product successfully).

Bonus points:

    Make login blocking on a timer. That is, if you enter incorrectly 3 times, you are not allowed to try for 5 minutes, if you enter incorrectly 4 times, for 1 hour, etc.
    Discounts for loyal customers (loyal, purchased more than 3 times in a certain period, or spent more than 500â‚¬)
    Ability for administrators to add and change discounts.
    The password must have requirements (use Regex) (import re).
    The password should be hashed.
    Implement an email confirmation system, as well as send emails to users with advertisements.
    Adding money to an account would be actually implemented (for example, Braintree and other providers have a test environment that can be installed and works with fake cards and payments)

Recommendations:

    Don't use ChatGPT for everything - there will be many mistakes, you can consult, but don't blindly copy everything (if you can't explain a certain part, there will be a minus point)
    Use Flask libraries, such as flask-login, etc.
    Imagine that you are creating a project for a client, so all errors must be reported and everything should be clearly presented.

Breakdown and Planning:

This prompt outlines a comprehensive e-commerce application, requiring a solid understanding of Python, Flask, SQLAlchemy, and web development concepts.

Key features and considerations:

    Authentication and Authorization: Implement robust login, registration, and password hashing. Use Flask-Login for user management.
    Database Design: Create an efficient database schema using SQLAlchemy to store user information, products, orders, and other relevant data.
    E-commerce Functionality: Build a shopping cart system, handle payments (using a payment gateway like Stripe), and manage inventory.
    User Experience: Design a user-friendly interface with clear navigation and informative product pages.
    Admin Panel: Provide administrators with tools to manage products, users, and system settings.
    Error Handling: Implement proper error handling using try-except blocks and logging.
    Version Control: Use Git and GitHub for collaborative development and code management.
    Security: Protect user data and prevent common web vulnerabilities like SQL injection and cross-site scripting.

Technical Implementation:

    Project Setup:
        Create a new Flask project.
        Set up a virtual environment.
        Install required dependencies (Flask, SQLAlchemy, Flask-WTF, etc.).
        Configure a database (e.g., PostgreSQL, SQLite).
    Database Modeling:
        Define models for users, products, orders, and other entities.
        Create migrations and apply them to the database.
    Routes and Views:
        Create routes for different pages (home, products, cart, login, registration, admin).
        Render templates using Jinja2.
    Forms:
        Create forms for login, registration, and product search using Flask-WTF.
    Authentication:
        Implement user authentication using Flask-Login.
        Store hashed passwords securely.
    E-commerce Functionality:
        Create a shopping cart system using sessions or a database.
        Implement payment processing with Stripe.
    Admin Panel:
        Create admin-only routes for managing products, users, and orders.
    Error Handling and Logging:
        Use try-except blocks to catch exceptions.
        Implement a logging system to record errors and user actions.
    Deployment:
        Deploy the application to a web server (e.g., Heroku, AWS).

Additional Considerations:

    Testing: Write unit tests to ensure code quality and reliability.
    Scalability: Design the application to handle increasing traffic and data.
    Security: Follow best practices for web application security.
    User Experience: Prioritize a user-friendly interface and clear navigation.
    Continuous Integration/Continuous Deployment (CI/CD): Set up a CI/CD pipeline to automate testing and deployment.